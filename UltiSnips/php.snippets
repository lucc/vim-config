global !p
import json
import pathlib
def find_composer():
    root = pathlib.Path(path)
    print(path)
    while root != pathlib.Path("/"):
        composer = root / 'composer.json'
        if composer.exists():
            return composer
        root = root.parent
def find_namespace():
    composer = find_composer()
    cwd = pathlib.Path.cwd()
    file = pathlib.Path(path).absolute()
    if composer is None:
        return ""
    data = json.load(composer.open())
    for key in ["autoload", "autoload-dev"]:
        #try:
        namespaces = data[key]['psr-4']
        #except KeyError:
        #    continue
        for n, p in namespaces.items():
            if cwd / p in file.parents:
                return (n +
		'\\'.join(file.parent.relative_to(cwd/p).parts)).rstrip("\\")
    return ""
endglobal

snippet fun "function with docblock" b
/**
 * ${4:undocumented function}
 * ${2/([\\a-zA-Z0-9_$ ]+)(, |$)/\n     * \@param $1/g}
 * @return $3 $5
 */
function ${1:name}(${2:$arg}): ${3:void}
{
	$0
}
endsnippet

snippet php "A basic php class file" b
<?php

declare(strict_types=1);

namespace `!p snip.rv = find_namespace()`;

/**
 * $1
 */
class `!v fnamemodify(bufname(), ':t:r')`
{
	$0
}
endsnippet

snippet test "test function with @test annotation" b
/** @test */
public function ${1}(): void
{
	${0:${VISUAL}}
}
endsnippet

snippet pub "Public function" b
/**
 * ${4:undocumented function}
 * ${2/([\\a-zA-Z0-9_$ ]+)(, |$)/\n     * \@param $1/g}
 * @return $3 $5
 */
public function ${1:name}(${2:$param}): ${3:void}
{
	${VISUAL}${6:return null;}
}
$0
endsnippet

snippet pubs "Public static function" b
/**
 * ${4:undocumented function}
 * ${2/([\\a-zA-Z0-9_$ ]+)(, |$)/\n     * \@param $1/g}
 * @return $3 $5
 */
public static function ${1:name}(${2:$param}): ${3:void}
{
	${VISUAL}${6:return null;}
}
$0
endsnippet
